// Code generated by goctl. DO NOT EDIT!
// Source: common.proto

package commonclient

import (
	"context"

	"kapok/kapok-admin/service/basic/common/common"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AppConfigReq  = common.AppConfigReq
	AppConfigResp = common.AppConfigResp
	BaseAppReq    = common.BaseAppReq
	BaseAppResp   = common.BaseAppResp

	Common interface {
		GetAppConfig(ctx context.Context, in *AppConfigReq, opts ...grpc.CallOption) (*AppConfigResp, error)
		GetBaseApp(ctx context.Context, in *BaseAppReq, opts ...grpc.CallOption) (*BaseAppResp, error)
	}

	defaultCommon struct {
		cli zrpc.Client
	}
)

func NewCommon(cli zrpc.Client) Common {
	return &defaultCommon{
		cli: cli,
	}
}

func (m *defaultCommon) GetAppConfig(ctx context.Context, in *AppConfigReq, opts ...grpc.CallOption) (*AppConfigResp, error) {
	client := common.NewCommonClient(m.cli.Conn())
	return client.GetAppConfig(ctx, in, opts...)
}

func (m *defaultCommon) GetBaseApp(ctx context.Context, in *BaseAppReq, opts ...grpc.CallOption) (*BaseAppResp, error) {
	client := common.NewCommonClient(m.cli.Conn())
	return client.GetBaseApp(ctx, in, opts...)
}
