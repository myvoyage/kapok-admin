// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cms.proto

package cms

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//请求的api
type CmsConfigReq struct {
	Beid                 int64    `protobuf:"varint,1,opt,name=beid,proto3" json:"beid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmsConfigReq) Reset()         { *m = CmsConfigReq{} }
func (m *CmsConfigReq) String() string { return proto.CompactTextString(m) }
func (*CmsConfigReq) ProtoMessage()    {}
func (*CmsConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97ff36b3f18da39, []int{0}
}

func (m *CmsConfigReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmsConfigReq.Unmarshal(m, b)
}
func (m *CmsConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmsConfigReq.Marshal(b, m, deterministic)
}
func (m *CmsConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmsConfigReq.Merge(m, src)
}
func (m *CmsConfigReq) XXX_Size() int {
	return xxx_messageInfo_CmsConfigReq.Size(m)
}
func (m *CmsConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CmsConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_CmsConfigReq proto.InternalMessageInfo

func (m *CmsConfigReq) GetBeid() int64 {
	if m != nil {
		return m.Beid
	}
	return 0
}

//返回的值
type CmsConfigResp struct {
	Beid                 int64    `protobuf:"varint,1,opt,name=beid,proto3" json:"beid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmsConfigResp) Reset()         { *m = CmsConfigResp{} }
func (m *CmsConfigResp) String() string { return proto.CompactTextString(m) }
func (*CmsConfigResp) ProtoMessage()    {}
func (*CmsConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97ff36b3f18da39, []int{1}
}

func (m *CmsConfigResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmsConfigResp.Unmarshal(m, b)
}
func (m *CmsConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmsConfigResp.Marshal(b, m, deterministic)
}
func (m *CmsConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmsConfigResp.Merge(m, src)
}
func (m *CmsConfigResp) XXX_Size() int {
	return xxx_messageInfo_CmsConfigResp.Size(m)
}
func (m *CmsConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CmsConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_CmsConfigResp proto.InternalMessageInfo

func (m *CmsConfigResp) GetBeid() int64 {
	if m != nil {
		return m.Beid
	}
	return 0
}

func init() {
	proto.RegisterType((*CmsConfigReq)(nil), "cms.CmsConfigReq")
	proto.RegisterType((*CmsConfigResp)(nil), "cms.CmsConfigResp")
}

func init() { proto.RegisterFile("cms.proto", fileDescriptor_a97ff36b3f18da39) }

var fileDescriptor_a97ff36b3f18da39 = []byte{
	// 118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0xce, 0x2d, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0xce, 0x2d, 0x56, 0x52, 0xe2, 0xe2, 0x71, 0xce,
	0x2d, 0x76, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x0f, 0x4a, 0x2d, 0x14, 0x12, 0xe2, 0x62, 0x49, 0x4a,
	0xcd, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x02, 0xb3, 0x95, 0x94, 0xb9, 0x78, 0x91,
	0xd4, 0x14, 0x17, 0x60, 0x53, 0x64, 0x64, 0xc3, 0xc5, 0xec, 0x9c, 0x5b, 0x2c, 0x64, 0xca, 0xc5,
	0xe3, 0x9e, 0x5a, 0x02, 0x57, 0x2e, 0x24, 0xa8, 0x07, 0xb2, 0x10, 0xd9, 0x0a, 0x29, 0x21, 0x74,
	0xa1, 0xe2, 0x82, 0x24, 0x36, 0xb0, 0x93, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x41,
	0x5b, 0xfb, 0x9f, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CmsClient is the client API for Cms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CmsClient interface {
	GetCmsConfig(ctx context.Context, in *CmsConfigReq, opts ...grpc.CallOption) (*CmsConfigResp, error)
}

type cmsClient struct {
	cc *grpc.ClientConn
}

func NewCmsClient(cc *grpc.ClientConn) CmsClient {
	return &cmsClient{cc}
}

func (c *cmsClient) GetCmsConfig(ctx context.Context, in *CmsConfigReq, opts ...grpc.CallOption) (*CmsConfigResp, error) {
	out := new(CmsConfigResp)
	err := c.cc.Invoke(ctx, "/cms.Cms/GetCmsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmsServer is the server API for Cms service.
type CmsServer interface {
	GetCmsConfig(context.Context, *CmsConfigReq) (*CmsConfigResp, error)
}

// UnimplementedCmsServer can be embedded to have forward compatible implementations.
type UnimplementedCmsServer struct {
}

func (*UnimplementedCmsServer) GetCmsConfig(ctx context.Context, req *CmsConfigReq) (*CmsConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCmsConfig not implemented")
}

func RegisterCmsServer(s *grpc.Server, srv CmsServer) {
	s.RegisterService(&_Cms_serviceDesc, srv)
}

func _Cms_GetCmsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmsConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetCmsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/GetCmsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetCmsConfig(ctx, req.(*CmsConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cms_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cms.Cms",
	HandlerType: (*CmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCmsConfig",
			Handler:    _Cms_GetCmsConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms.proto",
}
