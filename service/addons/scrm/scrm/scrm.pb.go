// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scrm.proto

package scrm

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//请求的api
type ScrmConfigReq struct {
	Beid                 int64    `protobuf:"varint,1,opt,name=beid,proto3" json:"beid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScrmConfigReq) Reset()         { *m = ScrmConfigReq{} }
func (m *ScrmConfigReq) String() string { return proto.CompactTextString(m) }
func (*ScrmConfigReq) ProtoMessage()    {}
func (*ScrmConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa5ac971fddbb1d7, []int{0}
}

func (m *ScrmConfigReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScrmConfigReq.Unmarshal(m, b)
}
func (m *ScrmConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScrmConfigReq.Marshal(b, m, deterministic)
}
func (m *ScrmConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScrmConfigReq.Merge(m, src)
}
func (m *ScrmConfigReq) XXX_Size() int {
	return xxx_messageInfo_ScrmConfigReq.Size(m)
}
func (m *ScrmConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ScrmConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_ScrmConfigReq proto.InternalMessageInfo

func (m *ScrmConfigReq) GetBeid() int64 {
	if m != nil {
		return m.Beid
	}
	return 0
}

//返回的值
type ScrmConfigResp struct {
	Beid                 int64    `protobuf:"varint,1,opt,name=beid,proto3" json:"beid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScrmConfigResp) Reset()         { *m = ScrmConfigResp{} }
func (m *ScrmConfigResp) String() string { return proto.CompactTextString(m) }
func (*ScrmConfigResp) ProtoMessage()    {}
func (*ScrmConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa5ac971fddbb1d7, []int{1}
}

func (m *ScrmConfigResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScrmConfigResp.Unmarshal(m, b)
}
func (m *ScrmConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScrmConfigResp.Marshal(b, m, deterministic)
}
func (m *ScrmConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScrmConfigResp.Merge(m, src)
}
func (m *ScrmConfigResp) XXX_Size() int {
	return xxx_messageInfo_ScrmConfigResp.Size(m)
}
func (m *ScrmConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ScrmConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_ScrmConfigResp proto.InternalMessageInfo

func (m *ScrmConfigResp) GetBeid() int64 {
	if m != nil {
		return m.Beid
	}
	return 0
}

func init() {
	proto.RegisterType((*ScrmConfigReq)(nil), "scrm.ScrmConfigReq")
	proto.RegisterType((*ScrmConfigResp)(nil), "scrm.ScrmConfigResp")
}

func init() { proto.RegisterFile("scrm.proto", fileDescriptor_fa5ac971fddbb1d7) }

var fileDescriptor_fa5ac971fddbb1d7 = []byte{
	// 118 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x4e, 0x2e, 0xca,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x94, 0xb9, 0x78, 0x83, 0x93,
	0x8b, 0x72, 0x9d, 0xf3, 0xf3, 0xd2, 0x32, 0xd3, 0x83, 0x52, 0x0b, 0x85, 0x84, 0xb8, 0x58, 0x92,
	0x52, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0xc0, 0x6c, 0x25, 0x15, 0x2e, 0x3e,
	0x64, 0x45, 0xc5, 0x05, 0xd8, 0x54, 0x19, 0x39, 0x71, 0xb1, 0x80, 0x54, 0x09, 0x59, 0x71, 0xf1,
	0xba, 0xa7, 0x96, 0x20, 0x34, 0x08, 0x09, 0xeb, 0x81, 0xad, 0x45, 0xb1, 0x47, 0x4a, 0x04, 0x53,
	0xb0, 0xb8, 0x20, 0x89, 0x0d, 0xec, 0x36, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x12,
	0xb8, 0x69, 0xa9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScrmClient is the client API for Scrm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScrmClient interface {
	GetScrmConfig(ctx context.Context, in *ScrmConfigReq, opts ...grpc.CallOption) (*ScrmConfigResp, error)
}

type scrmClient struct {
	cc *grpc.ClientConn
}

func NewScrmClient(cc *grpc.ClientConn) ScrmClient {
	return &scrmClient{cc}
}

func (c *scrmClient) GetScrmConfig(ctx context.Context, in *ScrmConfigReq, opts ...grpc.CallOption) (*ScrmConfigResp, error) {
	out := new(ScrmConfigResp)
	err := c.cc.Invoke(ctx, "/scrm.Scrm/GetScrmConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScrmServer is the server API for Scrm service.
type ScrmServer interface {
	GetScrmConfig(context.Context, *ScrmConfigReq) (*ScrmConfigResp, error)
}

// UnimplementedScrmServer can be embedded to have forward compatible implementations.
type UnimplementedScrmServer struct {
}

func (*UnimplementedScrmServer) GetScrmConfig(ctx context.Context, req *ScrmConfigReq) (*ScrmConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScrmConfig not implemented")
}

func RegisterScrmServer(s *grpc.Server, srv ScrmServer) {
	s.RegisterService(&_Scrm_serviceDesc, srv)
}

func _Scrm_GetScrmConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrmConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrmServer).GetScrmConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scrm.Scrm/GetScrmConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrmServer).GetScrmConfig(ctx, req.(*ScrmConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scrm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scrm.Scrm",
	HandlerType: (*ScrmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScrmConfig",
			Handler:    _Scrm_GetScrmConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scrm.proto",
}
